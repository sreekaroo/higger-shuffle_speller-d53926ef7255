%% clear workspace and set subject info
clear; clc;

projectID = 'shuffle';
subjectID = 'dev';

%% load parameters
saveFileStem = setPathAndSavefile(...
    'projectID', projectID, ...
    'subjectID', subjectID);
jheapcl;
DAQparamsApp;
presentationParams;
calibParams;

fixCrossIconPath = {dictAlpha.dm.image};
posRatioDash = [iconStimAssocWidth, 0, 1, 1];
posRatioIconStimAssoc = [0, 0, iconStimAssocWidth, 1];

%% init eyeTracker if need be
switch eyeTrack
    case 'eyex'
        daqEyeObj = DaqEyeXareaProp();
    case 'pupil'
        daqEyeObj = DaqPupil();
    case 'none'
        daqEyeObj = [];
    otherwise
        error('eyeTrack not recognized')
end

if ~strcmp(eyeTrack, 'none')
    % ensure we're getting something
    daqEyeObj.OpenDevice()
    daqEyeObj.StartAcquisition();
    pause(.05);
    assert(~isempty(daqEyeObj.GetData), 'daqEye not returning data');
    daqEyeObj.StopAcquisition;
end

%% Initialize daqManager - calibrateAmps and testParalellPort if flags are set
switch daqType
    case 'gUSBAmp'
        daqEEGobj = DAQgUSBAmp(...
            'fs', fs,...
            'frontEndFilterFlag', frontEndFilterFlag, ...
            'notchFilterNdx', notchFilterNdx,...
            'ampFilterNdx', ampFilterNdx,...
            'calibrationFlag', calibrationFlag,...
            'testParalellPortFlag', false, ...
            'channelList', channelList, ...
            'channelNames', channelNames);
    case 'noAmp'
        daqEEGobj = DAQnoAmp(...
            'fs', fs,...
            'notchFilterNdx', notchFilterNdx,...
            'ampFilterNdx', ampFilterNdx,...
            'calibrationFlag', calibrationFlag,...
            'testParalellPortFlag', false, ...
            'channelList', channelList, ...
            'channelNames', channelNames);
    otherwise
        error('invalid daqType');
end

%% pre-launch GUI - gives option to visually inspect signals for quality before proceeding
continueFlag = launchGUI('daqManagerObj', daqEEGobj);

if continueFlag
    fprintf('gui exited: launching shuffle speller\n');
else
    fprintf('gui exited: quitting shuffle speller\n');
    return;
end

%% init LEDstimulationObj
LEDstimulationObj = LEDstimulation('stimLengthsec',stimLengthSec);
if numStim == 4
   LEDstimulationObj.activeChannels = [1, 3, 4, 6]; 
end
% NOTE: this stimStruct is used for brightness / mode testing only
if ~strcmp(stimMode, 'none')
    stimFreqObj = stimFreq(...
        'freq', linspace(10, 15, numStim), ...
        'brightness', 150);
    LEDstimulationObj.ConfigureStimulusDDS(stimFreqObj.stimStruct);
    LEDstimulationObj.SetParamCmdLine;
end

%% init iconStimAssoc  
iconStimAssocObj = iconStimAssoc(...
    'screenNumber', screenNumber, ...
    'posRatio', posRatioIconStimAssoc, ...
    'iconPaths', fixCrossIconPath, ...
    'iconBoxesPerRowCol', iconBoxesPerRowCol, ...
    'iconBoxesBordRatio', iconBoxesBordRatio, ...
    'iconBoxesPosRatio', iconBoxesPosRatio, ...
    'initIconBoxPosRatio', initIconBoxPosRatio, ...
    'iconBoxesColor', iconBoxesColor);


%% init stimSSVEPobj
switch stimMode
    case 'freq'
        stimSSVEPobj = stimFreq('freq', freq);
        assert(length(iconStimAssocObj.iconBoxes) == length(stimSSVEPobj.stimStruct), ...
            'stim mismatch')
    case 'maxHamm'
        stimSSVEPobj = stimMaxHamm(numStim, ...
            'bitRate', stimFs);        
        assert(length(iconStimAssocObj.iconBoxes) == length(stimSSVEPobj.stimStruct), ...
            'stim mismatch')
        numStim = length(stimSSVEPobj.stimStruct);
    case 'none'
        stimSSVEPobj = nan;
        numStim = length(iconStimAssocObj.iconBoxes);
end


%% init trainingStimulationSchedulerObj
calibStimSchedObj = calibStimSched(numStim,...
    'numTrialsPerStim', numTrialsPerStim);

%% init eyeFixCircle if need be
if eyeFixCircleRadius
    white = ones(4, 1) * 255;
    black = [0; 0; 0; 255];
    mkPosRatio = @(x)([ones(2,1) * -x; ones(2,1) * x] + ones(4,1) * .5);
    otherPTBdispObj(1) = oval(...
        'windowPointer', iconStimAssocObj.windowPointer, ...
        'posRatio', mkPosRatio(eyeFixCircleRadius), ...
        'boundPosRatio', iconStimAssocObj.posRatio, ...
        'colorFill', white);
    otherPTBdispObj(2) = oval(...
        'windowPointer', iconStimAssocObj.windowPointer, ...        
        'boundPosRatio', iconStimAssocObj.posRatio, ...
        'posRatio', mkPosRatio(.01), ...
        'colorFill', black);
else
    otherPTBdispObj.Draw = [];
end

%% init dashboard
dashboardObj = dashboard(...
    'windowPointer', iconStimAssocObj.windowPointer, ...
    'textBoxTextSize', textBoxTextSize, ...
    'posRatio', posRatioDash, ...
    'verboseContructor', false, ...
    'barGraphFlag', false);    

%% init controlCalib
controlCalibObj = controlCalib(...
    'daqEEGobj', daqEEGobj, ...
    'stimSSVEPobj', stimSSVEPobj, ...
    'windowPointer', iconStimAssocObj.windowPointer, ...
    'LEDstimulationObj', LEDstimulationObj, ...
    'iconStimAssocObj', iconStimAssocObj, ...
    'dashboardObj', dashboardObj, ...
    'minWaitTimeSec', minWaitTimeSec,...
    'spacebarRequiredFlag', spacebarRequiredFlag, ...
    'puzzImg', puzzImg, ...
    'trialsPerBreak', trialsPerBreak, ...
    'breakTimeSec', breakTimeSec, ...
    'daqEyeObj', daqEyeObj, ...
    'otherPTBdispObj', otherPTBdispObj, ...
    'eyeTrackColorFlag', eyeTrackColorFlag, ...
    'eyeTrackMinThresh', eyeTrackMinThresh, ...
    'moveTargetFlag', moveTargetFlag);

%% start amps 
daqEEGobj.OpenDevice;
daqEEGobj.StartAcquisition('fileName', [saveFileStem, '.bin']);

%% perform stimulation
[eyeTrackSuccess, dataStruct] = controlCalibObj.Run(calibStimSchedObj);

%% collect EEG, save objects
daqEEGobj.StopAcquisition;
daqEEGobj.CloseDevice;

%% save
parametersSavefile = [saveFileStem, '_presObj.mat'];
save(parametersSavefile,...
    'controlCalibObj',...
    'dataStruct', ...
    'eyeTrackSuccess', ...
    'daqEEGobj',...
    'calibStimSchedObj', ...
    'projectID', ...
    'subjectID')

%% cleanup
sca;